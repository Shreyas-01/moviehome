{"version":3,"sources":["utils/constants.js","components/Card/Card.js","components/List/List.js","components/Search/Search.js","pages/SearchPage/SearchPage.js","pages/DetailsPage/DetailsPage.js","pages/HomePage/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axiosHeaders","headers","Card","React","memo","props","movie","history","useHistory","className","src","Poster","alt","Title","Year","Type","onClick","push","imdbID","List","elements","component","map","e","element","createElement","key","Search","value","type","placeholder","onChange","target","onSubmit","SearchPage","useState","searchTerm","setSearchTerm","searchResult","setSearchResult","uri","axios","get","then","res","data","Array","onSubmitSuccess","catch","err","console","error","DetailsPage","params","useParams","setMovie","useEffect","log","rt","undefined","Ratings","Value","mt","Director","Actors","Production","Writer","Plot","Runtime","Rated","imdbRating","Awards","BoxOffice","HomePage","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3d4b8024.chunk.js","sourcesContent":["\r\nconst baseUrl = 'http://localhost:3001/';\r\nconst axiosHeaders = {\r\n\theaders: {\r\n\t'Access-Control-Allow-Origin': '*',\r\n\t}\r\n};\r\nexport { baseUrl, axiosHeaders }","import React from 'react';\r\nimport './Card.css';\r\nimport { useHistory } from 'react-router-dom';\r\n/**\r\n * useState(), useHistory() => Both are react hooks.\r\n * React hooks help to change state.\r\n * State change via hooks also informs React that\r\n * re-rendering is required.\r\n * React.memo is a special function. It prevents re-rendering\r\n * unless this component's input has changed.\r\n * Usually all child components re-rendered.\r\n * With React.memo() only if this component input has updated\r\n * then re-rendering will occur.\r\n */\r\nconst Card = React.memo(props => {\r\n\r\nconst movie = props.movie;\r\nconst history = useHistory();\r\n\r\nconst viewButtonClick = () => {\r\n    history.push(`/details/${movie.imdbID}`);\r\n}\r\n\r\nreturn (\r\n    <div className=\"col-lg-4 col-md-6\">\r\n        <div className=\"card bg-dark\">\r\n        <img src={movie.Poster} alt=\"Poster\" className=\"card-img-top\"></img>\r\n        <div className=\"card-body text-center\">\r\n            <h5 className=\"card-title\">{movie.Title}</h5>\r\n            <p className=\"card-text text-center text-uppercase\"> YEAR: {movie.Year} | CATEGORY: {movie.Type} </p>\r\n            <button className=\"btn btn-md btn-outline-info\" onClick={viewButtonClick}>View details</button>\r\n        </div>\r\n        </div> \r\n        <br/>\r\n    </div>\r\n)});\r\n\r\nexport default Card;","import React from 'react';\r\nimport './List.css';\r\n\r\nexport default function List(props) {\r\n  const elements = props.elements || []; // Array of movies\r\n  const component = props.component; // Card component\r\n\r\n  const createReactElement = (element) => {\r\n    /**\r\n   * This is a specific use case where you have to use the compiled version directly\r\n   * Second argument is input for card component.\r\n   * A list in react has to have a unique input property of key.\r\n   */\r\n    return React.createElement(component, { movie: element, key: element.imdbID })\r\n  }\r\n  \r\n  // console.log(elements);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {elements.map(e => createReactElement(e))}\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\nimport './Search.css';\r\n\r\nexport default function Search(props) {\r\nconst value = props.value;\r\nconst handleChange = (e) => props.onChange(e.target.value);\r\nconst handleSubmit = () => props.onSubmit(value);\r\n\r\nreturn (\r\n    <div className=\"background\">\r\n        <div className=\"input-group mb-3 col-4\">\r\n        <input type=\"text\" className=\"search form-control\" placeholder=\"Search your movie here\" value={value} onChange={handleChange}/>\r\n        <div className=\"input-group-append\">\r\n            <button className=\"btn btn2 btn-outline-danger\" type=\"button\" onClick={handleSubmit}>Search</button>\r\n        </div>\r\n        </div> \r\n    </div>\r\n)};","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { baseUrl, axiosHeaders } from '../../utils/constants';\r\n\r\nimport Card from '../../components/Card/Card';\r\nimport List from '../../components/List/List';\r\nimport Search from '../../components/Search/Search';\r\n\r\nexport default function SearchPage() {\r\nconst [searchTerm, setSearchTerm] = useState('');\r\nconst [searchResult, setSearchResult] = useState([]);\r\n\r\nconst onSubmitSuccess = (res) => {\r\n    // Data validation before setting searchResult\r\n    if (res && res.data && res.data.Search instanceof Array) {\r\n    setSearchResult(res.data.Search);\r\n    }\r\n}\r\n\r\nconst onSubmit = (searchTerm) => {\r\n    const uri = `${baseUrl}omdb/search?title=${searchTerm}`;\r\n    axios.get(uri, axiosHeaders)\r\n        .then(res => onSubmitSuccess(res))\r\n        .catch(err => console.error(err));\r\n}\r\n\r\nreturn (\r\n    <>\r\n    <Search value={searchTerm} onChange={setSearchTerm} onSubmit={onSubmit} />\r\n    <br />\r\n    <List elements={searchResult} component={Card} />\r\n    </>\r\n)};","import React, { useState, useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { baseUrl, axiosHeaders} from '../../utils/constants';\r\nimport './DetailsPage.css';\r\n\r\nexport default function DetailsPage() {\r\n    const params = useParams();\r\n    const [movie, setMovie] = useState();\r\n\r\n    useEffect(() => {\r\n        const uri = `${baseUrl}omdb/imdb/${params.imdbID}`;\r\n        axios.get(uri, axiosHeaders)\r\n        .then(res => {\r\n            if (res && res.data) {\r\n                setMovie(res.data);\r\n                \r\n        }})\r\n        .catch(err => console.error(err));\r\n    },[])\r\n\r\n    console.log(movie);\r\n    \r\n    if(movie!=null) {\r\n        const rt = movie.Ratings[1]!==undefined?movie.Ratings[1].Value:\"N/A\";\r\n        const mt = movie.Ratings[2]!==undefined?movie.Ratings[2].Value:\"N/A\";\r\n    return (\r\n        <div className=\"info col-8\">\r\n            <h5 className=\"text-center\">{movie.Title}</h5>\r\n            <ul className=\"list\">\r\n                <li>Director(s): {movie.Director}</li>\r\n                <li>Actors: {movie.Actors}</li>\r\n                <li>Production: {movie.Production}</li>\r\n                <li>Writer(s): {movie.Writer}</li>\r\n                <li>Plot: {movie.Plot}</li>\r\n                <li>Runtime: {movie.Runtime}</li>\r\n                <li>Age rating: {movie.Rated}</li>\r\n                <div className=\"row\">\r\n                    <div><li>Ratings:</li></div>\r\n                    <div ><ul>\r\n                    <li>Metacritic: {mt}</li>\r\n                    <li>Rotten Tomatoes: {rt}</li>\r\n                    <li>imdb: {movie.imdbRating}</li>\r\n                    </ul></div>\r\n                </div>\r\n                <li>Awards won: {movie.Awards}</li>\r\n                <li>Box-office collection: {movie.BoxOffice}</li>\r\n            </ul>\r\n        </div>\r\n    )} else{\r\n        return (\r\n            null\r\n    )}\r\n};","import React from 'react';\r\nimport './HomePage.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default function HomePage() {\r\n\r\n    const history = useHistory();\r\n\r\n    const toSearch = () => {\r\n        history.push('/search');\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <p className=\" text text-center addShadow\">Search any Movie!</p>\r\n            <button type=\"button\" onClick={toSearch} className=\"btn btn1 btn-lg col-2 btn-outline-success\">Start</button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport SearchPage from './pages/SearchPage/SearchPage';\r\nimport DetailsPage from './pages/DetailsPage/DetailsPage';\r\nimport HomePage from './pages/HomePage/HomePage';\r\n\r\n/**\r\n * The Router maps a url to a component\r\n */\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-fluid remove-padding\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/search\" component={SearchPage} />\r\n          <Route path=\"/details/:imdbID\" component={DetailsPage} />\r\n          <Route path=\"/\" component={HomePage} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}